#include <iostream> #include <queue> using namespace std; class Queue { private: queue<int> q; public: void enqueue(int item) { q.push(item); } int dequeue() { if (!q.empty()) { int front = q.front(); q.pop(); return front; } else { cout << "Queue is empty." << endl; return -1; // Assuming -1 as a placeholder for empty queue } } int peek() { if (!q.empty()) { return q.front(); } else { cout << "Queue is empty." << endl; return -1; // Assuming -1 as a placeholder for empty queue } } int size() { return q.size(); } bool isEmpty() { return q.empty(); } }; int main() { Queue q; // Enqueue some elements q.enqueue(1); q.enqueue(2); q.enqueue(3);

// Print the queue cout << "Queue: "; while (!q.isEmpty()) { cout << q.dequeue() << " "; } cout << endl; // Enqueue more elements q.enqueue(4); q.enqueue(5); // Peek the front element cout << "Front of the queue: " << q.peek() << endl; // Print the size of the queue cout << "Size of the queue: " << q.size() << endl; return 0; }
